<?xml version="1.0" ?>
<synergyModuleDescription>
    <!-- SCE periphheral configuration and module description -->
    <config id="config.driver.sce" path="ssp_cfg/driver/r_sce_cfg.h" version="0">
        <content></content>
    </config>
    <module config="config.driver.sce" display="Driver|Crypto|${module.driver.sce.name} SCE COMMON Driver on r_sce" id="module.driver.sce" common="1" version="1">
    <provides interface="interface.driver.crypto"/>
    <provides interface="interface.driver.sce"/>
        <property default="g_sce" display="Name" id="module.driver.sce.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce.name}")
            </constraint>
        </property>
        <property display="Endian flag"
             id="module.driver.sce.endian_flag"
             default="module.driver.sce.endian_flag.big_endian" >
            <option display="CRYPTO_WORD_ENDIAN_BIG"
                    id="module.driver.sce.endian_flag.big_endian"
                    value="CRYPTO_WORD_ENDIAN_BIG"/>
            <option display="CRYPTO_WORD_ENDIAN_LITTLE"
                    id="module.driver.sce.endian_flag.little_endian"
                    value="CRYPTO_WORD_ENDIAN_LITTLE"/>
        </property>
            <property default="" display="" id="module.driver.sce.intentional_blank_line_1">
        </property>
        <property default="" display="Interfaces which can be accessed through InterfaceGet API." id="module.driver.sce.crypto_module_list" description="These interfaces are intended to be accessed by Crypto framework modules. Disable unwanted interfaces here. Disable all the interfaces if using only Crypto HAL and not using InterfaceGet API to save code/text space.">
        </property>
        <property default="" display="AES Plain-text ECB 128-bit" id="module.driver.sce.crypto_aes_plain_text_128_ecb">
            <select enum="enum.driver.sce.crypto_aes_plain_text_128_ecb" />
        </property>
        <property default="" display="AES Plain-text CBC 128-bit" id="module.driver.sce.crypto_aes_plain_text_128_cbc">
            <select enum="enum.driver.sce.crypto_aes_plain_text_128_cbc" />
        </property>
        <property default="" display="AES Plain-text CTR 128-bit" id="module.driver.sce.crypto_aes_plain_text_128_ctr">
            <select enum="enum.driver.sce.crypto_aes_plain_text_128_ctr" />
        </property>
        <property default="" display="AES Plain-text GCM 128-bit" id="module.driver.sce.crypto_aes_plain_text_128_gcm">
            <select enum="enum.driver.sce.crypto_aes_plain_text_128_gcm" />
        </property>
        <property default="" display="AES Plain-text XTS 128-bit" id="module.driver.sce.crypto_aes_plain_text_128_xts">
            <select enum="enum.driver.sce.crypto_aes_plain_text_128_xts" />
        </property>
        <property default="" display="AES Plain-text ECB 192-bit" id="module.driver.sce.crypto_aes_plain_text_192_ecb">
            <select enum="enum.driver.sce.crypto_aes_plain_text_192_ecb" />
        </property>
        <property default="" display="AES Plain-text CBC 192-bit" id="module.driver.sce.crypto_aes_plain_text_192_cbc">
            <select enum="enum.driver.sce.crypto_aes_plain_text_192_cbc" />
        </property>
        <property default="" display="AES Plain-text CTR 192-bit" id="module.driver.sce.crypto_aes_plain_text_192_ctr">
            <select enum="enum.driver.sce.crypto_aes_plain_text_192_ctr" />
        </property>
        <property default="" display="AES Plain-text GCM 192-bit" id="module.driver.sce.crypto_aes_plain_text_192_gcm">
            <select enum="enum.driver.sce.crypto_aes_plain_text_192_gcm" />
        </property>
        <property default="" display="AES Plain-text ECB 256-bit" id="module.driver.sce.crypto_aes_plain_text_256_ecb">
            <select enum="enum.driver.sce.crypto_aes_plain_text_256_ecb" />
        </property>
        <property default="" display="AES Plain-text CBC 256-bit" id="module.driver.sce.crypto_aes_plain_text_256_cbc">
            <select enum="enum.driver.sce.crypto_aes_plain_text_256_cbc" />
        </property>
        <property default="" display="AES Plain-text CTR 256-bit" id="module.driver.sce.crypto_aes_plain_text_256_ctr">
            <select enum="enum.driver.sce.crypto_aes_plain_text_256_ctr" />
        </property>
        <property default="" display="AES Plain-text GCM 256-bit" id="module.driver.sce.crypto_aes_plain_text_256_gcm">
            <select enum="enum.driver.sce.crypto_aes_plain_text_256_gcm" />
        </property>
        <property default="" display="AES Plain-text XTS 256-bit" id="module.driver.sce.crypto_aes_plain_text_256_xts">
            <select enum="enum.driver.sce.crypto_aes_plain_text_256_xts" />
        </property>
        <property default="" display="AES Wrapped ECB 128-bit" id="module.driver.sce.crypto_aes_wrapped_128_ecb">
            <select enum="enum.driver.sce.crypto_aes_wrapped_128_ecb" />
        </property>
        <property default="" display="AES Wrapped CBC 128-bit" id="module.driver.sce.crypto_aes_wrapped_128_cbc">
            <select enum="enum.driver.sce.crypto_aes_wrapped_128_cbc" />
        </property>
        <property default="" display="AES Wrapped CTR 128-bit" id="module.driver.sce.crypto_aes_wrapped_128_ctr">
            <select enum="enum.driver.sce.crypto_aes_wrapped_128_ctr" />
        </property>
        <property default="" display="AES Wrapped GCM 128-bit" id="module.driver.sce.crypto_aes_wrapped_128_gcm">
            <select enum="enum.driver.sce.crypto_aes_wrapped_128_gcm" />
        </property>
        <property default="" display="AES Wrapped XTS 128-bit" id="module.driver.sce.crypto_aes_wrapped_128_xts">
            <select enum="enum.driver.sce.crypto_aes_wrapped_128_xts" />
        </property>
        <property default="" display="AES Wrapped ECB 192-bit" id="module.driver.sce.crypto_aes_wrapped_192_ecb">
            <select enum="enum.driver.sce.crypto_aes_wrapped_192_ecb" />
        </property>
        <property default="" display="AES Wrapped CBC 192-bit" id="module.driver.sce.crypto_aes_wrapped_192_cbc">
            <select enum="enum.driver.sce.crypto_aes_wrapped_192_cbc" />
        </property>
        <property default="" display="AES Wrapped CTR 192-bit" id="module.driver.sce.crypto_aes_wrapped_192_ctr">
            <select enum="enum.driver.sce.crypto_aes_wrapped_192_ctr" />
        </property>
        <property default="" display="AES Wrapped GCM 192-bit" id="module.driver.sce.crypto_aes_wrapped_192_gcm">
            <select enum="enum.driver.sce.crypto_aes_wrapped_192_gcm" />
        </property>
        <property default="" display="AES Wrapped ECB 256-bit" id="module.driver.sce.crypto_aes_wrapped_256_ecb">
            <select enum="enum.driver.sce.crypto_aes_wrapped_256_ecb" />
        </property>
        <property default="" display="AES Wrapped CBC 256-bit" id="module.driver.sce.crypto_aes_wrapped_256_cbc">
            <select enum="enum.driver.sce.crypto_aes_wrapped_256_cbc" />
        </property>
        <property default="" display="AES Wrapped CTR 256-bit" id="module.driver.sce.crypto_aes_wrapped_256_ctr">
            <select enum="enum.driver.sce.crypto_aes_wrapped_256_ctr" />
        </property>
        <property default="" display="AES Wrapped GCM 256-bit" id="module.driver.sce.crypto_aes_wrapped_256_gcm">
            <select enum="enum.driver.sce.crypto_aes_wrapped_256_gcm" />
        </property>
        <property default="" display="AES Wrapped XTS 256-bit" id="module.driver.sce.crypto_aes_wrapped_256_xts">
            <select enum="enum.driver.sce.crypto_aes_wrapped_256_xts" />
        </property>
        <property default="" display="RSA Plain-text 1024-bit" id="module.driver.sce.crypto_rsa_plain_text_1024">
            <select enum="enum.driver.sce.crypto_rsa_plain_text_1024" />
        </property>
        <property default="" display="RSA Plain-text 2048-bit" id="module.driver.sce.crypto_rsa_plain_text_2048">
            <select enum="enum.driver.sce.crypto_rsa_plain_text_2048" />
        </property>
        <property default="" display="RSA Wrapped 1024-bit" id="module.driver.sce.crypto_rsa_wrapped_1024">
            <select enum="enum.driver.sce.crypto_rsa_wrapped_1024" />
        </property>
        <property default="" display="RSA Wrapped 2048-bit" id="module.driver.sce.crypto_rsa_wrapped_2048">
            <select enum="enum.driver.sce.crypto_rsa_wrapped_2048" />
        </property>
        <property default="" display="ECC Plain-text 192-bit" id="module.driver.sce.crypto_ecc_plain_text_192">
            <select enum="enum.driver.sce.crypto_ecc_plain_text_192" />
        </property>
        <property default="" display="ECC Plain-text 256-bit" id="module.driver.sce.crypto_ecc_plain_text_256">
            <select enum="enum.driver.sce.crypto_ecc_plain_text_256" />
        </property>
        <property default="" display="ECC Wrapped 192-bit" id="module.driver.sce.crypto_ecc_wrapped_192">
            <select enum="enum.driver.sce.crypto_ecc_wrapped_192" />
        </property>
        <property default="" display="ECC Wrapped 256-bit" id="module.driver.sce.crypto_ecc_wrapped_256">
            <select enum="enum.driver.sce.crypto_ecc_wrapped_256" />
        </property>
        <property default="" display="HASH SHA1" id="module.driver.sce.crypto_hash_sha1">
            <select enum="enum.driver.sce.crypto_hash_sha1" />
        </property>
        <property default="" display="HASH SHA224" id="module.driver.sce.crypto_hash_sha224">
            <select enum="enum.driver.sce.crypto_hash_sha224" />
        </property>
        <property default="" display="HASH SHA256" id="module.driver.sce.crypto_hash_sha256">
            <select enum="enum.driver.sce.crypto_hash_sha256" />
            </property>
        <property default="" display="HASH MD5" id="module.driver.sce.crypto_hash_md5">
            <select enum="enum.driver.sce.crypto_hash_md5" />
            </property>
        <property default="" display="True Random Number Generator" id="module.driver.sce.crypto_trng">
            <select enum="enum.driver.sce.crypto_trng" />
        </property>
        <header>
            extern const crypto_instance_t ${module.driver.sce.name};
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_128_ECB   ${module.driver.sce.crypto_aes_plain_text_128_ecb}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_128_CBC   ${module.driver.sce.crypto_aes_plain_text_128_cbc}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_128_CTR   ${module.driver.sce.crypto_aes_plain_text_128_ctr}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_128_GCM   ${module.driver.sce.crypto_aes_plain_text_128_gcm}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_128_XTS   ${module.driver.sce.crypto_aes_plain_text_128_xts}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_192_ECB   ${module.driver.sce.crypto_aes_plain_text_192_ecb}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_192_CBC   ${module.driver.sce.crypto_aes_plain_text_192_cbc}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_192_CTR   ${module.driver.sce.crypto_aes_plain_text_192_ctr}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_192_GCM   ${module.driver.sce.crypto_aes_plain_text_192_gcm}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_256_ECB   ${module.driver.sce.crypto_aes_plain_text_256_ecb}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_256_CBC   ${module.driver.sce.crypto_aes_plain_text_256_cbc}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_256_CTR   ${module.driver.sce.crypto_aes_plain_text_256_ctr}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_256_GCM   ${module.driver.sce.crypto_aes_plain_text_256_gcm}
            #define R_SCE_SERVICES_AES_PLAIN_TEXT_256_XTS   ${module.driver.sce.crypto_aes_plain_text_256_xts}
            #define R_SCE_SERVICES_AES_WRAPPED_128_ECB      ${module.driver.sce.crypto_aes_wrapped_128_ecb}
            #define R_SCE_SERVICES_AES_WRAPPED_128_CBC      ${module.driver.sce.crypto_aes_wrapped_128_cbc}
            #define R_SCE_SERVICES_AES_WRAPPED_128_CTR      ${module.driver.sce.crypto_aes_wrapped_128_ctr}
            #define R_SCE_SERVICES_AES_WRAPPED_128_GCM      ${module.driver.sce.crypto_aes_wrapped_128_gcm}
            #define R_SCE_SERVICES_AES_WRAPPED_128_XTS      ${module.driver.sce.crypto_aes_wrapped_128_xts}
            #define R_SCE_SERVICES_AES_WRAPPED_192_ECB      ${module.driver.sce.crypto_aes_wrapped_192_ecb}
            #define R_SCE_SERVICES_AES_WRAPPED_192_CBC      ${module.driver.sce.crypto_aes_wrapped_192_cbc}
            #define R_SCE_SERVICES_AES_WRAPPED_192_CTR      ${module.driver.sce.crypto_aes_wrapped_192_ctr}
            #define R_SCE_SERVICES_AES_WRAPPED_192_GCM      ${module.driver.sce.crypto_aes_wrapped_192_gcm}
            #define R_SCE_SERVICES_AES_WRAPPED_256_ECB      ${module.driver.sce.crypto_aes_wrapped_256_ecb}
            #define R_SCE_SERVICES_AES_WRAPPED_256_CBC      ${module.driver.sce.crypto_aes_wrapped_256_cbc}
            #define R_SCE_SERVICES_AES_WRAPPED_256_CTR      ${module.driver.sce.crypto_aes_wrapped_256_ctr}
            #define R_SCE_SERVICES_AES_WRAPPED_256_GCM      ${module.driver.sce.crypto_aes_wrapped_256_gcm}
            #define R_SCE_SERVICES_AES_WRAPPED_256_XTS      ${module.driver.sce.crypto_aes_wrapped_256_xts}
            #define R_SCE_SERVICES_RSA_PLAIN_TEXT_1024      ${module.driver.sce.crypto_rsa_plain_text_1024}
            #define R_SCE_SERVICES_RSA_PLAIN_TEXT_2048      ${module.driver.sce.crypto_rsa_plain_text_2048}
            #define R_SCE_SERVICES_RSA_WRAPPED_1024         ${module.driver.sce.crypto_rsa_wrapped_1024}
            #define R_SCE_SERVICES_RSA_WRAPPED_2048         ${module.driver.sce.crypto_rsa_wrapped_2048}
            #define R_SCE_SERVICES_ECC_PLAIN_TEXT_192       ${module.driver.sce.crypto_ecc_plain_text_192}
            #define R_SCE_SERVICES_ECC_PLAIN_TEXT_256       ${module.driver.sce.crypto_ecc_plain_text_256}
            #define R_SCE_SERVICES_ECC_WRAPPED_192          ${module.driver.sce.crypto_ecc_wrapped_192}
            #define R_SCE_SERVICES_ECC_WRAPPED_256          ${module.driver.sce.crypto_ecc_wrapped_256}
            #define R_SCE_SERVICES_HASH_SHA1                ${module.driver.sce.crypto_hash_sha1}
            #define R_SCE_SERVICES_HASH_SHA256              (${module.driver.sce.crypto_hash_sha256} || ${module.driver.sce.crypto_hash_sha224})
            #define R_SCE_SERVICES_HASH_MD5                 ${module.driver.sce.crypto_hash_md5}
            #define R_SCE_SERVICES_TRNG                     ${module.driver.sce.crypto_trng}
        </header>
        <includes>
            #include &quot;r_crypto_api.h&quot;
            #include &quot;r_aes_api.h&quot;
            #include &quot;r_rsa_api.h&quot;
            #include &quot;r_ecc_api.h&quot;
            #include &quot;r_hash_api.h&quot;
            #include &quot;r_trng_api.h&quot;
            #include &quot;r_sce.h&quot;
        </includes>
        <declarations>
            #if defined(BSP_FEATURE_HAS_SCE_ON_S1)  /* Crypto on S1 */
            sce_interface_get_api_interfaces_t g_sce_selected_api_interfaces =
            {
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_ECB
                .aes128ecb_on_sce  = (uint32_t)&amp;g_aes128ecb_on_sce,
            #else
                .aes128ecb_on_sce  = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_CBC
                .aes128cbc_on_sce  = (uint32_t)&amp;g_aes128cbc_on_sce,
            #else
                .aes128cbc_on_sce  = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_CTR
                .aes128ctr_on_sce  = (uint32_t)&amp;g_aes128ctr_on_sce,
            #else
                .aes128ctr_on_sce  = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_ECB
                .aes256ecb_on_sce  = (uint32_t)&amp;g_aes256ecb_on_sce,
            #else
                .aes256ecb_on_sce  = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_CBC
                .aes256cbc_on_sce  = (uint32_t)&amp;g_aes256cbc_on_sce,
            #else
                .aes256cbc_on_sce  = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_CTR
                .aes256ctr_on_sce  = (uint32_t)&amp;g_aes256ctr_on_sce,
            #else
                .aes256ctr_on_sce  = 0,
            #endif
            #if R_SCE_SERVICES_TRNG
                .trng_on_sce       = (uint32_t)&amp;g_trng_on_sce
            #else
                .trng_on_sce       = 0
            #endif
            };
            
            #elif defined(BSP_FEATURE_HAS_SCE5) /* SCE5 */

            sce_interface_get_api_interfaces_t g_sce_selected_api_interfaces =
            {
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_ECB
                .aes128ecb_on_sce     = (uint32_t)&amp;g_aes128ecb_on_sce,
            #else
                .aes128ecb_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_CBC
                .aes128cbc_on_sce     = (uint32_t)&amp;g_aes128cbc_on_sce,
            #else
                .aes128cbc_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_CTR
                .aes128ctr_on_sce     = (uint32_t)&amp;g_aes128ctr_on_sce,
            #else
                .aes128ctr_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_GCM
                .aes128gcm_on_sce     = (uint32_t)&amp;g_aes128gcm_on_sce,
            #else
                .aes128gcm_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_XTS
                .aes128xts_on_sce     = (uint32_t)&amp;g_aes128xts_on_sce,
            #else
                .aes128xts_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_ECB
                .aes256ecb_on_sce     = (uint32_t)&amp;g_aes256ecb_on_sce,
            #else
                .aes256ecb_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_CBC
                .aes256cbc_on_sce     = (uint32_t)&amp;g_aes256cbc_on_sce,
            #else
                .aes256cbc_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_CTR
                .aes256ctr_on_sce     = (uint32_t)&amp;g_aes256ctr_on_sce,
            #else
                .aes256ctr_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_GCM
                .aes256gcm_on_sce     = (uint32_t)&amp;g_aes256gcm_on_sce,
            #else
                .aes256gcm_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_XTS
                .aes256xts_on_sce     = (uint32_t)&amp;g_aes256xts_on_sce,
            #else
                .aes256xts_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_128_ECB
                .aes128ecb_on_sceHrk  = (uint32_t)&amp;g_aes128ecb_on_sceHrk,
            #else
                .aes128ecb_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_128_CBC
                .aes128cbc_on_sceHrk  = (uint32_t)&amp;g_aes128cbc_on_sceHrk,
            #else
                .aes128cbc_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_128_CTR
                .aes128ctr_on_sceHrk  = (uint32_t)&amp;g_aes128ctr_on_sceHrk,
            #else
                .aes128ctr_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_128_GCM
                .aes128gcm_on_sceHrk  = (uint32_t)&amp;g_aes128gcm_on_sceHrk,
            #else
                .aes128gcm_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_128_XTS
                .aes128xts_on_sceHrk  = (uint32_t)&amp;g_aes128xts_on_sceHrk,
            #else
                .aes128xts_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_256_ECB
                .aes256ecb_on_sceHrk  = (uint32_t)&amp;g_aes256ecb_on_sceHrk,
            #else
                .aes256ecb_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_256_CBC
                .aes256cbc_on_sceHrk  = (uint32_t)&amp;g_aes256cbc_on_sceHrk,
            #else
                .aes256cbc_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_256_CTR
                .aes256ctr_on_sceHrk  = (uint32_t)&amp;g_aes256ctr_on_sceHrk,
            #else
                .aes256ctr_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_256_GCM
                .aes256gcm_on_sceHrk  = (uint32_t)&amp;g_aes256gcm_on_sceHrk,
            #else
                .aes256gcm_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_256_XTS
                .aes256xts_on_sceHrk  = (uint32_t)&amp;g_aes256xts_on_sceHrk,
            #else
                .aes256xts_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_TRNG
                .trng_on_sce          = (uint32_t)&amp;g_trng_on_sce
            #else
                .trng_on_sce          = 0
            #endif
            };
            
            #else /* SCE7 */
            
            sce_interface_get_api_interfaces_t g_sce_selected_api_interfaces =
            {
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_ECB
                .aes128ecb_on_sce     = (uint32_t)&amp;g_aes128ecb_on_sce,
            #else
                .aes128ecb_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_CBC
                .aes128cbc_on_sce     = (uint32_t)&amp;g_aes128cbc_on_sce,
            #else
                .aes128cbc_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_CTR
                .aes128ctr_on_sce     = (uint32_t)&amp;g_aes128ctr_on_sce,
            #else
                .aes128ctr_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_GCM
                .aes128gcm_on_sce     = (uint32_t)&amp;g_aes128gcm_on_sce,
            #else
                .aes128gcm_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_128_XTS
                .aes128xts_on_sce     = (uint32_t)&amp;g_aes128xts_on_sce,
            #else
                .aes128xts_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_192_ECB
                .aes192ecb_on_sce     = (uint32_t)&amp;g_aes192ecb_on_sce,
            #else
                .aes192ecb_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_192_CBC
                .aes192cbc_on_sce     = (uint32_t)&amp;g_aes192cbc_on_sce,
            #else
                .aes192cbc_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_192_CTR
                .aes192ctr_on_sce     = (uint32_t)&amp;g_aes192ctr_on_sce,
            #else
                .aes192ctr_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_192_GCM
                .aes192gcm_on_sce     = (uint32_t)&amp;g_aes192gcm_on_sce,
            #else
                .aes192gcm_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_ECB
                .aes256ecb_on_sce     = (uint32_t)&amp;g_aes256ecb_on_sce,
            #else
                .aes256ecb_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_CBC
                .aes256cbc_on_sce     = (uint32_t)&amp;g_aes256cbc_on_sce,
            #else
                .aes256cbc_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_CTR
                .aes256ctr_on_sce     = (uint32_t)&amp;g_aes256ctr_on_sce,
            #else
                .aes256ctr_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_GCM
                .aes256gcm_on_sce     = (uint32_t)&amp;g_aes256gcm_on_sce,
            #else
                .aes256gcm_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_PLAIN_TEXT_256_XTS
                .aes256xts_on_sce     = (uint32_t)&amp;g_aes256xts_on_sce,
            #else
                .aes256xts_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_128_ECB
                .aes128ecb_on_sceHrk  = (uint32_t)&amp;g_aes128ecb_on_sceHrk,
            #else
                .aes128ecb_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_128_CBC
                .aes128cbc_on_sceHrk  = (uint32_t)&amp;g_aes128cbc_on_sceHrk,
            #else
                .aes128cbc_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_128_CTR
                .aes128ctr_on_sceHrk  = (uint32_t)&amp;g_aes128ctr_on_sceHrk,
            #else
                .aes128ctr_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_128_GCM
                .aes128gcm_on_sceHrk  = (uint32_t)&amp;g_aes128gcm_on_sceHrk,
            #else
                .aes128gcm_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_128_XTS
                .aes128xts_on_sceHrk  = (uint32_t)&amp;g_aes128xts_on_sceHrk,
            #else
                .aes128xts_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_192_ECB
                .aes192ecb_on_sceHrk  = (uint32_t)&amp;g_aes192ecb_on_sceHrk,
            #else
                .aes192ecb_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_192_CBC
                .aes192cbc_on_sceHrk  = (uint32_t)&amp;g_aes192cbc_on_sceHrk,
            #else
                .aes192cbc_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_192_CTR
                .aes192ctr_on_sceHrk  = (uint32_t)&amp;g_aes192ctr_on_sceHrk,
            #else
                .aes192ctr_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_192_GCM
                .aes192gcm_on_sceHrk  = (uint32_t)&amp;g_aes192gcm_on_sceHrk,
            #else
                .aes192gcm_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_256_ECB
                .aes256ecb_on_sceHrk  = (uint32_t)&amp;g_aes256ecb_on_sceHrk,
            #else
                .aes256ecb_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_256_CBC
                .aes256cbc_on_sceHrk  = (uint32_t)&amp;g_aes256cbc_on_sceHrk,
            #else
                .aes256cbc_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_256_CTR
                .aes256ctr_on_sceHrk  = (uint32_t)&amp;g_aes256ctr_on_sceHrk,
            #else
                .aes256ctr_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_256_GCM
                .aes256gcm_on_sceHrk  = (uint32_t)&amp;g_aes256gcm_on_sceHrk,
            #else
                .aes256gcm_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_AES_WRAPPED_256_XTS
                .aes256xts_on_sceHrk  = (uint32_t)&amp;g_aes256xts_on_sceHrk,
            #else
                .aes256xts_on_sceHrk  = 0,
            #endif
            #if R_SCE_SERVICES_RSA_PLAIN_TEXT_1024
                .rsa1024_on_sce       = (uint32_t)&amp;g_rsa1024_on_sce,
            #else
                .rsa1024_on_sce       = 0,
            #endif
            #if R_SCE_SERVICES_RSA_PLAIN_TEXT_2048
                .rsa2048_on_sce       = (uint32_t)&amp;g_rsa2048_on_sce,
            #else
                .rsa2048_on_sce       = 0,
            #endif
            #if R_SCE_SERVICES_RSA_WRAPPED_1024
                .rsa1024_on_sce_hrk   = (uint32_t)&amp;g_rsa1024_on_sce_hrk,
            #else
                .rsa1024_on_sce_hrk   = 0,
            #endif
            #if R_SCE_SERVICES_RSA_WRAPPED_2048
                .rsa2048_on_sce_hrk   = (uint32_t)&amp;g_rsa2048_on_sce_hrk,
            #else
                .rsa2048_on_sce_hrk   = 0,
            #endif
            #if R_SCE_SERVICES_HASH_MD5
                .md5_hash_on_sce      = (uint32_t)&amp;g_md5_hash_on_sce,
            #else
                .md5_hash_on_sce      = 0,
            #endif
            #if R_SCE_SERVICES_HASH_SHA1
                .sha1_hash_on_sce     = (uint32_t)&amp;g_sha1_hash_on_sce,
            #else
                .sha1_hash_on_sce     = 0,
            #endif
            #if R_SCE_SERVICES_HASH_SHA256
                .sha256_hash_on_sce   = (uint32_t)&amp;g_sha256_hash_on_sce,
            #else
                .sha256_hash_on_sce   = 0,
            #endif
            #if R_SCE_SERVICES_ECC_PLAIN_TEXT_192
                .ecc192_on_sce        = (uint32_t)&amp;g_ecc192_on_sce,
            #else
                .ecc192_on_sce        = 0,
            #endif
            #if R_SCE_SERVICES_ECC_PLAIN_TEXT_256
                .ecc256_on_sce        = (uint32_t)&amp;g_ecc256_on_sce,
            #else
                .ecc256_on_sce        = 0,
            #endif
            #if R_SCE_SERVICES_ECC_WRAPPED_192
                .ecc192_on_sce_hrk    = (uint32_t)&amp;g_ecc192_on_sce_hrk,
            #else
                .ecc192_on_sce_hrk    = 0,
            #endif
            #if R_SCE_SERVICES_ECC_WRAPPED_256
                .ecc256_on_sce_hrk    = (uint32_t)&amp;g_ecc256_on_sce_hrk,
            #else
                .ecc256_on_sce_hrk    = 0,
            #endif
            #if R_SCE_SERVICES_TRNG
                .trng_on_sce          = (uint32_t)&amp;g_trng_on_sce
            #else
                .trng_on_sce          = 0
            #endif
            };
            
            #endif /* Crypto on S1 / SCE5 / SCE7 */
            
            crypto_ctrl_t ${module.driver.sce.name}_ctrl;
            crypto_cfg_t  ${module.driver.sce.name}_cfg =
            { .p_sce_long_plg_start_callback = NULL,
              .p_sce_long_plg_end_callback   = NULL,
              .endian_flag = ${module.driver.sce.endian_flag},
              .p_sce_api_interfaces = &amp;g_sce_selected_api_interfaces
            };
            const crypto_instance_t ${module.driver.sce.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce.name}_cfg  ,
                  .p_api  = &amp;g_sce_crypto_api
            };
        </declarations>
        <init>
        </init>
    </module>

    <!-- random number generation configuration and module description -->
    <config id="config.driver.sce_trng" path="ssp_cfg/driver/r_sce_trng_cfg.h" version="0">
        <content></content>
    </config>
    <module config="config.driver.sce_trng" display="Driver|Crypto|${module.driver.sce_trng.name} TRNG Driver on r_sce_trng" id="module.driver.sce_trng" common="1" version="1">
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />
        <provides interface="interface.driver.crypto.trng"/>
        <provides interface="interface.driver.sce_trng"/>
        <property default="g_sce_trng" display="Name" id="module.driver.sce_trng.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_trng.name}")</constraint>
        </property>
        <property default="2" display="Max. Attempts" id="module.driver.sce_trng.nattempts">
            <constraint display="Maximum number of attempts must be a positive integer">
                testInteger("${module.driver.sce_trng.nattempts}")
            </constraint>
        </property>
        <header>
            extern const trng_instance_t ${module.driver.sce_trng.name};
        </header>
        <includes>
            #include &quot;r_trng_api.h&quot;
        </includes>
        <declarations>
            trng_ctrl_t ${module.driver.sce_trng.name}_ctrl;
            trng_cfg_t  ${module.driver.sce_trng.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api,
              .nattempts = ${module.driver.sce_trng.nattempts}
            };
            const trng_instance_t ${module.driver.sce_trng.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_trng.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_trng.name}_cfg  ,
                  .p_api  = &amp;g_trng_on_sce
            };
        </declarations>
        <init>
       </init>
    </module>

    <!-- AES configuration and module description -->
    <config id="config.driver.sce_aes" path="ssp_cfg/driver/r_sce_aes_cfg.h" version="0">
        <content></content>
    </config>
    <module config="config.driver.sce_aes" display="Driver|Crypto|${module.driver.sce_aes.name} AES Driver on r_sce_aes" id="module.driver.sce_aes" version="1">
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    <provides interface="interface.driver.crypto.aes"/>
        <property default="g_sce_aes_${_instance}" display="Name" id="module.driver.sce_aes.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_aes.name}")
            </constraint>
        </property>
        <property display="Key Length"
             id="module.driver.sce_aes.key_length"
             default="module.driver.sce_aes.key_length.key128bit" >
            <option display="128"
                    id="module.driver.sce_aes.key_length.key128bit"
                    value="128"/>
            <option display="192"
                    id="module.driver.sce_aes.key_length.key192bit"
                    value="192"/>
            <option display="256"
                    id="module.driver.sce_aes.key_length.key256bit"
                    value="256"/>
        </property>
        <property display="Chaining Mode"
            id="module.driver.sce_aes.chaining_mode"
            default="module.driver.sce_aes.chaining_mode.cbc">
            <option display="ECB"
                    id="module.driver.sce_aes.chaining_mode.ecb"
                    value="ecb"/>
            <option display="CBC"
                    id="module.driver.sce_aes.chaining_mode.cbc"
                    value="cbc"/>
            <option display="CTR"
                    id="module.driver.sce_aes.chaining_mode.ctr"
                    value="ctr"/>
            <option display="GCM"
                    id="module.driver.sce_aes.chaining_mode.gcm"
                    value="gcm"/>
            <option display="XTS"
                    id="module.driver.sce_aes.chaining_mode.xts"
                    value="xts"/>
        </property>
        <property display="Key Format"
             id="module.driver.sce_aes.key_format"
             default="module.driver.sce_aes.key_format.plain_text" >
            <option display="Plain Text Key"
                    id="module.driver.sce_aes.key_format.plain_text"
                    value=""/>
            <option display="Wrapped Key (Not available for S1 MCU Series)"
                    id="module.driver.sce_aes.key_format.wrapped"
                    value="Hrk"/>
        </property>
        <header>
            extern const aes_instance_t ${module.driver.sce_aes.name};
        </header>
        <includes>
            #include &quot;r_aes_api.h&quot;
        </includes>
        <declarations>
            #if ( (${module.driver.sce_aes.key_length} == 192) &amp;&amp; !( defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9)  || defined(BSP_MCU_GROUP_S5D5) || defined(BSP_MCU_GROUP_S5D3)) )
            #error  "AES 192-bit Driver on SCE Feature not available for selected MCU"
            #endif
            #define ecb 100
            #define cbc 200
            #define ctr 300
            #define gcm 400
            #define xts 500
            #if ( (${module.driver.sce_aes.chaining_mode} == gcm) &amp;&amp; (defined(BSP_MCU_GROUP_S124) || defined(BSP_MCU_GROUP_S128) || defined(BSP_MCU_GROUP_S1JA)) )
            #error  "AES GCM Mode on SCE Feature not available for selected MCU"
            #endif
            #if ( (${module.driver.sce_aes.chaining_mode} == xts) &amp;&amp; (defined(BSP_MCU_GROUP_S124) || defined(BSP_MCU_GROUP_S128) || defined(BSP_MCU_GROUP_S1JA)) )
            #error  "AES XTS Mode on SCE Feature not available for selected MCU"
            #endif
            #if ( (${module.driver.sce_aes.key_length} == 192) &amp;&amp; (${module.driver.sce_aes.chaining_mode} == xts) )
            #error  "AES 192-bit XTS Mode unavailable"
            #endif
            #undef ecb
            #undef cbc
            #undef ctr
            #undef gcm
            #undef xts
            /* Wrapped key implementation not available for S1 MCU Series,
             * report an error if Wrapped key format is chosen when using an S1 MCU series
             */
            #define sceHrk 1000
            #if ( (sce${module.driver.sce_aes.key_format} == sceHrk) &amp;&amp; (defined(BSP_MCU_GROUP_S124) || defined(BSP_MCU_GROUP_S128) || defined(BSP_MCU_GROUP_S1JA)) )
            #error  "Wrapped key Feature not available for selected MCU"
            #endif
            #undef    sceHrk
            aes_ctrl_t ${module.driver.sce_aes.name}_ctrl;
            aes_cfg_t  ${module.driver.sce_aes.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api
            };
            const aes_instance_t ${module.driver.sce_aes.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_aes.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_aes.name}_cfg  ,
                  .p_api  = &amp;g_aes${module.driver.sce_aes.key_length}${module.driver.sce_aes.chaining_mode}_on_sce${module.driver.sce_aes.key_format}
            };
        </declarations>
        <init>
        </init>
    </module>

    <!-- Hash (message digest) driver configuration and module description -->
    <config id="config.driver.sce_hash" path="ssp_cfg/driver/r_sce_hash_cfg.h" version="0">
        <content></content>
    </config>
    <module config="config.driver.sce_hash" display="Driver|Crypto|${module.driver.sce_hash.name} HASH Driver on r_sce_hash" id="module.driver.sce_hash" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for HASH Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for HASH Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />
        <provides interface="interface.driver.crypto.hash"/>
        <provides interface="interface.driver.sce_hash"/>
        <property default="g_sce_hash_${_instance}" display="Name (for S7G2, S5D9, S5D5, S5D3 devices only)" id="module.driver.sce_hash.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_hash.name}")
            </constraint>
        </property>
        <property display="Algorithm"
             id="module.driver.sce_hash.algorithm"
             default="module.driver.sce_hash.algorithm.sha256" >
            <option display="SHA1"
                    id="module.driver.sce_hash.algorithm.sha1"
                    value="SHA1"/>
            <option display="MD5"
                    id="module.driver.sce_hash.algorithm.md5"
                    value="MD5"/>
            <option display="SHA224"
                    id="module.driver.sce_hash.algorithm.sha224"
                    value="SHA224"/>
            <option display="SHA256"
                    id="module.driver.sce_hash.algorithm.sha256"
                    value="SHA256"/>
        </property>
        <property display=""
             id="module.driver.sce_hash.algorithm_id"
             default="">
            <export>eval(' \
            value =  ("${module.driver.sce_hash.algorithm}" == "SHA224") ? "sha256" : "${module.driver.sce_hash.algorithm}".toLowerCase() \
            ')</export>
        </property>
        <header>
            extern const hash_instance_t ${module.driver.sce_hash.name};
        </header>
        <includes>
            #include &quot;r_hash_api.h&quot;
        </includes>
        <declarations>
        #if defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9) || defined(BSP_MCU_GROUP_S5D5) || defined(BSP_MCU_GROUP_S5D3)
            hash_ctrl_t ${module.driver.sce_hash.name}_ctrl;
            hash_cfg_t  ${module.driver.sce_hash.name}_cfg =
            {
              .p_crypto_api  = &amp;g_sce_crypto_api
            };
            const hash_instance_t ${module.driver.sce_hash.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_hash.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_hash.name}_cfg  ,
                  .p_api  = &amp;g_${module.driver.sce_hash.algorithm_id}_hash_on_sce
            };
        #else
            #error  "HASH Driver on SCE Feature not available for selected MCU"
        #endif
        </declarations>
        <init>
        </init>
    </module>

    <!-- RSA configuration and module description -->
    <config id="config.driver.sce_rsa" path="ssp_cfg/driver/r_sce_rsa_cfg.h" version="0">
        <content></content>
    </config>
    <module config="config.driver.sce_rsa" display="Driver|Crypto|${module.driver.sce_rsa.name} RSA Driver on r_sce_rsa" id="module.driver.sce_rsa" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for RSA Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for RSA Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    <provides interface="interface.driver.crypto.rsa"/>
        <property default="g_sce_rsa_${_instance}" display="Name (for S7G2, S5D9, S5D5, S5D3 devices only)" id="module.driver.sce_rsa.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_rsa.name}")
            </constraint>
        </property>
        <property display="Key Length"
             id="module.driver.sce_rsa.key_length"
             default="module.driver.sce_rsa.key_length.key2048bit" >
            <option display="1024"
                    id="module.driver.sce_rsa.key_length.key1024bit"
                    value="1024"/>
            <option display="2048"
                    id="module.driver.sce_rsa.key_length.key2048bit"
                    value="2048"/>
        </property>
        <property display="Key Format"
             id="module.driver.sce_rsa.key_format"
             default="module.driver.sce_rsa.key_format.plain_text" >
            <option display="Plain Text Key"
                    id="module.driver.sce_rsa.key_format.plain_text"
                    value=""/>
            <option display="Wrapped Key"
                    id="module.driver.sce_rsa.key_format.wrapped"
                    value="_hrk"/>
        </property>
        <header>
            extern const rsa_instance_t ${module.driver.sce_rsa.name};
        </header>
        <includes>
            #include &quot;r_rsa_api.h&quot;
        </includes>
        <declarations>
        #if defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9) || defined(BSP_MCU_GROUP_S5D5) || defined(BSP_MCU_GROUP_S5D3)
            rsa_ctrl_t ${module.driver.sce_rsa.name}_ctrl;
            rsa_cfg_t  ${module.driver.sce_rsa.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api
            };
            const rsa_instance_t ${module.driver.sce_rsa.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_rsa.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_rsa.name}_cfg  ,
                  .p_api  = &amp;g_rsa${module.driver.sce_rsa.key_length}_on_sce${module.driver.sce_rsa.key_format}
            };
        #else
            #error  "RSA Driver on SCE Feature not available for selected MCU"
        #endif
        </declarations>
        <init>
        </init>
    </module>

    <!-- DSA configuration and module description -->
    <config id="config.driver.sce_dsa" path="ssp_cfg/driver/r_sce_dsa_cfg.h" version="0">
        <content></content>
    </config>
    <module config="config.driver.sce_dsa" display="Driver|Crypto|${module.driver.sce_dsa.name} DSA Driver on r_sce_dsa" id="module.driver.sce_dsa" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for DSA Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for DSA Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    <provides interface="interface.driver.crypto.dsa"/>
        <property default="g_sce_dsa_${_instance}" display="Name (for S7G2, S5D9, S5D5, S5D3 devices only)" id="module.driver.sce_dsa.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_dsa.name}")
            </constraint>
        </property>
        <property display="Key Length"
             id="module.driver.sce_dsa.key_length"
             default="module.driver.sce_dsa.key_length.key2048_256bit" >
            <option display="(1024, 160)"
                    id="module.driver.sce_dsa.key_length.key1024_160bit"
                    value="1024_160"/>
            <option display="(2048, 224)"
                    id="module.driver.sce_dsa.key_length.key2048_224bit"
                    value="2048_224"/>
            <option display="(2048, 256)"
                    id="module.driver.sce_dsa.key_length.key2048_256bit"
                    value="2048_256"/>
        </property>
        <header>
            extern const dsa_instance_t ${module.driver.sce_dsa.name};
        </header>
        <includes>
            #include &quot;r_dsa_api.h&quot;
        </includes>
        <declarations>
        #if defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9) || defined(BSP_MCU_GROUP_S5D5) || defined(BSP_MCU_GROUP_S5D3)
            dsa_ctrl_t ${module.driver.sce_dsa.name}_ctrl;
            dsa_cfg_t  ${module.driver.sce_dsa.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api
            };
            const dsa_instance_t ${module.driver.sce_dsa.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_dsa.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_dsa.name}_cfg  ,
                  .p_api  = &amp;g_dsa${module.driver.sce_dsa.key_length}_on_sce
            };
        #else
            #error  "DSA Driver on SCE Feature not available for selected MCU"
        #endif
        </declarations>
        <init>
        </init>
    </module>

    <!-- ARC4 configuration and module description -->
    <config id="config.driver.sce_arc4" path="ssp_cfg/driver/r_sce_arc4_cfg.h" version="0">
        <content></content>
    </config>
    <module config="config.driver.sce_arc4" display="Driver|Crypto|${module.driver.sce_arc4.name} ARC4 Driver on r_sce_arc4" id="module.driver.sce_arc4" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for ARC4 Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for ARC4 Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    <provides interface="interface.driver.crypto.arc4"/>
        <property default="g_sce_arc4_${_instance}" display="Name (for S7G2, S5D9, S5D5, S5D3 devices only)" id="module.driver.sce_arc4.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_arc4.name}")
            </constraint>
        </property>
        <property default="0" display="Key Length in number of bytes" id="module.driver.sce_arc4.key_length" >
             <constraint display="Key Length must be an integer in the range [0,256] and must be a multple of 4">
                testInteger("${module.driver.sce_arc4.key_length}") &amp;&amp; (
                     ("${module.driver.sce_arc4.key_length}" &gt;= 0) &amp;&amp; ("${module.driver.sce_arc4.key_length}" &lt;= 256) &amp;&amp;
                     (("${module.driver.sce_arc4.key_length}" % 4) == 0) )
             </constraint>
        </property>
        <property default="g_arc4_${_instance}_key" display="Key Name, this symbol must be defined as uint8_t array type data in user code" id="module.driver.sce_arc4.key_address" >
             <constraint display="Key Name must be a valid C symbol">
                testSymbol("${module.driver.sce_arc4.key_address}")
             </constraint>
        </property>
        <header>
            extern const arc4_instance_t ${module.driver.sce_arc4.name};
        </header>
        <includes>
            #include &quot;r_arc4_api.h&quot;
        </includes>
        <declarations>
            #if defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9) || defined(BSP_MCU_GROUP_S5D5) || defined(BSP_MCU_GROUP_S5D3)
                extern uint8_t ${module.driver.sce_arc4.key_address}[] ;
                arc4_ctrl_t ${module.driver.sce_arc4.name}_ctrl;
                arc4_cfg_t  ${module.driver.sce_arc4.name}_cfg =
                {
                  .p_crypto_api = &amp;g_sce_crypto_api,
                  .length       = ${module.driver.sce_arc4.key_length},
                  .p_key        = ${module.driver.sce_arc4.key_address} // the symbol ${module.driver.sce_arc4.key_address} should be defined in the user code
                };
                const arc4_instance_t ${module.driver.sce_arc4.name} =
                {
                  .p_ctrl = &amp;${module.driver.sce_arc4.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_arc4.name}_cfg  ,
                  .p_api  = &amp;g_arc4_on_sce
                };
            #else
               #error  "arc4 Driver on SCE Feature not available for selected MCU"
            #endif
        </declarations>
        <init>
        </init>
    </module>

    <!-- TDES configuration and module description -->
    <config id="config.driver.sce_tdes" path="ssp_cfg/driver/r_sce_tdes_cfg.h" version="0">
        <content></content>
    </config>
    <module config="config.driver.sce_tdes" display="Driver|Crypto|${module.driver.sce_tdes.name} TDES Driver on r_sce_tdes" id="module.driver.sce_tdes" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for TDES Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for TDES Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    <provides interface="interface.driver.crypto.tdes"/>
        <property default="g_sce_tdes_${_instance}" display="Name" id="module.driver.sce_tdes.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_tdes.name}")
            </constraint>
        </property>
        <property display="Chaining Mode"
            id="module.driver.sce_tdes.chaining_mode"
            default="module.driver.sce_tdes.chaining_mode.cbc">
            <option display="ECB"
                    id="module.driver.sce_tdes.chaining_mode.ecb"
                    value="ecb"/>
            <option display="CBC"
                    id="module.driver.sce_tdes.chaining_mode.cbc"
                    value="cbc"/>
            <option display="CTR"
                    id="module.driver.sce_tdes.chaining_mode.ctr"
                    value="ctr"/>
        </property>
        <header>
            extern const tdes_instance_t ${module.driver.sce_tdes.name};
        </header>
        <includes>
            #include &quot;r_tdes_api.h&quot;
        </includes>
        <declarations>
            #if ( !( defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9)  || defined(BSP_MCU_GROUP_S5D5) || defined(BSP_MCU_GROUP_S5D3)) )
            #error  "TDES 192-bit Driver on SCE Feature not available for selected MCU"
            #endif
            tdes_ctrl_t ${module.driver.sce_tdes.name}_ctrl;
            tdes_cfg_t  ${module.driver.sce_tdes.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api
            };
            const tdes_instance_t ${module.driver.sce_tdes.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_tdes.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_tdes.name}_cfg  ,
                  .p_api  = &amp;g_tdes192${module.driver.sce_tdes.chaining_mode}_on_sce
            };
        </declarations>
        <init>
        </init>
    </module>
    <!-- ECC configuration and module description -->
    <config id="config.driver.sce_ecc" path="ssp_cfg/driver/r_sce_ecc_cfg.h" version="0">
        <content></content>
    </config>
    <module config="config.driver.sce_ecc" display="Driver|Crypto|${module.driver.sce_ecc.name} ECC Driver on r_sce_ecc" id="module.driver.sce_ecc" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for ECC Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for ECC Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />
        <provides interface="interface.driver.crypto.ecc"/>
        <property default="g_sce_ecc_${_instance}" display="Name (for S7G2, S5D9, S5D5, S5D3 devices only)" id="module.driver.sce_ecc.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_ecc.name}")
            </constraint>
        </property>
        <property display="Key Length"
             id="module.driver.sce_ecc.key_length"
             default="module.driver.sce_ecc.key_length.key256bit" >
            <option display="192-bit"
                    id="module.driver.sce_ecc.key_length.key192bit"
                    value="192"/>
            <option display="224-bit"
                    id="module.driver.sce_ecc.key_length.key224bit"
                    value="224"/>
            <option display="256-bit"
                    id="module.driver.sce_ecc.key_length.key256bit"
                    value="256"/>
            <option display="384-bit"
                    id="module.driver.sce_ecc.key_length.key384bit"
                    value="384"/>
        </property>
        <property display="Key Format"
             id="module.driver.sce_ecc.key_format"
             default="module.driver.sce_ecc.key_format.plain_text" >
            <option display="Plain Text Key"
                    id="module.driver.sce_ecc.key_format.plain_text"
                    value=""/>
            <option display="Wrapped Key"
                    id="module.driver.sce_ecc.key_format.wrapped"
                    value="_hrk"/>
        </property>
        <header>
            extern const ecc_instance_t ${module.driver.sce_ecc.name};
        </header>
        <includes>
            #include &quot;r_ecc_api.h&quot;
        </includes>
        <declarations>
        #if defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9) || defined(BSP_MCU_GROUP_S5D5) || defined(BSP_MCU_GROUP_S5D3)
            ecc_ctrl_t ${module.driver.sce_ecc.name}_ctrl;
            ecc_cfg_t  ${module.driver.sce_ecc.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api
            };
            const ecc_instance_t ${module.driver.sce_ecc.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_ecc.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_ecc.name}_cfg  ,
                  .p_api  = &amp;g_ecc${module.driver.sce_ecc.key_length}_on_sce${module.driver.sce_ecc.key_format}
            };
        #else
            #error  "ECC Driver on SCE Feature not available for selected MCU"
        #endif
        </declarations>
        <init>
        </init>
    </module>
    <!-- Key Installation configuration and module description -->
    <config id="config.driver.sce_key_installation" path="ssp_cfg/driver/r_sce_key_installation_cfg.h" version="0">
        <content></content>
    </config>
    <module config="config.driver.sce_key_installation" display="Driver|Crypto|${module.driver.sce_key_installation.name} key_installation Driver on r_sce_key_installation" id="module.driver.sce_key_installation" version="1">
        <!-- Begining of MCU specific SCE peripheral constraint for Key Installation Crypto module -->
        <constraint display="Requires sce peripheral">
          "${interface.mcu.sce}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce" visible="false" display="Requires sce peripheral" />
        <!-- End of MCU specific SCE peripheral constraint for Key Installation Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />
		<provides interface="interface.driver.crypto.key_installation"/>
        <provides interface="interface.driver.sce_key_installation"/>
        <property default="g_sce_key_installation_${_instance}" display="Name (Not Supported for S1 Series MCUs)" id="module.driver.sce_key_installation.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_key_installation.name}")
            </constraint>
        </property>
        <header>
            extern key_installation_instance_t ${module.driver.sce_key_installation.name};
        </header>
        <includes>
            #include &quot;r_sce_key_installation.h&quot;
        </includes>
        <declarations>
            #if (defined(BSP_MCU_GROUP_S124) || defined(BSP_MCU_GROUP_S128) || defined(BSP_MCU_GROUP_S1JA))
            #error  "Key Installation not available for S1 Series MCUs"
            #else

            /* Control block for ${module.driver.sce_key_installation.name}. */
            key_installation_instance_ctrl_t ${module.driver.sce_key_installation.name}_ctrl;

            /* Configuration structure for ${module.driver.sce_key_installation.name}. */
            key_installation_cfg_t ${module.driver.sce_key_installation.name}_cfg =
            {
                .p_lower_lvl_crypto_api = &amp;g_sce_crypto_api,
                .p_extend                  = NULL,

            };
            /* Instance structure for ${module.driver.sce_key_installation.name}. */
            key_installation_instance_t ${module.driver.sce_key_installation.name} =
            {
                .p_ctrl = &amp;${module.driver.sce_key_installation.name}_ctrl,
                .p_cfg  = &amp;${module.driver.sce_key_installation.name}_cfg,
                .p_api  = &amp;g_key_installation_on_sce
            };

         #endif
        </declarations>
        <init>
        </init>
    </module>
</synergyModuleDescription>
