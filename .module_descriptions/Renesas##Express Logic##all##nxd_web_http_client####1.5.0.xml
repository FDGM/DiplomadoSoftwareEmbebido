<?xml version="1.0" encoding="UTF-8"?>
<synergyModuleDescription>
    <config id="config.el.nxd_web_http_client" path="ssp_cfg/framework/el/nxd_web_http_client_cfg.h" version="0">
	    <property default="config.el.nxd_web_http_client.param_checking_enable.bsp_default" display="Parameter Checking" id="config.el.nxd_web_http_client.param_checking_enable">
            <option display="Default (BSP)" id="config.el.nxd_web_http_client.param_checking_enable.bsp_default" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.el.nxd_web_http_client.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.el.nxd_web_http_client.param_checking_enable.disabled" value="(0)"/>
        </property>
        <property default="300" display="Minimum packet size (bytes)" id="config.el.nxd_web_http_client.min_packet_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nxd_web_http_client.min_packet_size}")  &amp;&amp; ("${config.el.nxd_web_http_client.min_packet_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="module.el.nxd_web_http_client.secure.disable" display="HTTPS Support" id="module.el.nxd_web_http_client.secure">
            <option display="Enable"  id="module.el.nxd_web_http_client.secure.enable"  value="1"/>
            <option display="Disable" id="module.el.nxd_web_http_client.secure.disable" value="0"/>
        </property>
        <content>
            #define NX_WEB_HTTP_CLIENT_MIN_PACKET_SIZE              ${config.el.nxd_web_http_client.min_packet_size}
			
            /* Defined, this option removes the basic Web HTTP client error checking */
            #if ${config.el.nxd_web_http_client.param_checking_enable}
            #define NX_DISABLE_ERROR_CHECKING
            #endif
            
            /* Enabling NX Secure Component within Web HTTP Client Instance */
            #if (${module.el.nxd_web_http_client.secure})
            #ifndef NX_WEB_HTTPS_ENABLE
            #define NX_WEB_HTTPS_ENABLE
            #endif
            #endif
        </content>
    </config>
    <module config="config.el.nxd_web_http_client" display="X-Ware|NetX Duo|Protocols|${module.el.nxd_web_http_client.name} NetX Duo Web HTTP/HTTPS Client" id="module.el.nxd_web_http_client" version="1" url="https://knowledgebase.renesas.com/English_Content/Renesas_Synergy%E2%84%A2_Platform/Renesas_Synergy_Knowledge_Base/NetX_Duo_HTTP_Client_Module_Guide_Resources">
        <constraint display="Module instances must have unique names">
            "${interface.el.nxd_web_http_client.${module.el.nxd_web_http_client.name}}" === "1"
        </constraint>
		<!-- Highlight Error when HTTPS Support is disabled and TLS Common block is added -->
		<constraint display ="Enable HTTPS Support">
			("${module.el.nxd_web_http_client.secure}" === "module.el.nxd_web_http_client.secure.enable") || (testExists("${module.el.nxd_web_http_client.requires.nxd_tls_common::module.el.nxd_tls_common.name}") === false)
		</constraint>
		<!-- Highlight Error when HTTPS Support is enabled and TLS Common block is missing -->
		<constraint display ="Requires NetX Duo TLS Common">
			("${module.el.nxd_web_http_client.secure}" === "module.el.nxd_web_http_client.secure.disable") || (testExists("${module.el.nxd_web_http_client.requires.nxd_tls_common::module.el.nxd_tls_common.name}") === true)
		</constraint>
        <requires interface="_rtos" />
        <requires id="module.el.nxd_web_http_client.requires.nxd.ip" interface="interface.el.nxd.ip" display="Add NetX Duo IP Instance" >
            <override property="module.el.nx.ip.arp" value="module.el.nx.ip.arp.enable" />
            <override property="module.el.nx.ip.tcp" value="module.el.nx.ip.tcp.enable" />
        </requires>
        <requires id="module.el.nxd_web_http_client.requires.nxd.packet_pool" interface="interface.el.nxd.packet_pool" display="Add NetX Duo Packet Pool" />
        <requires id="module.el.nxd_web_http_client.requires.nxd_web_http_common" interface="interface.el.nxd_web_http_common" display="Add Web HTTP Common" />
		<requires id="module.el.nxd_web_http_client.requires.nxd_tls_common" interface="interface.el.nxd_tls_common" display="Add NetX Duo TLS Common [Optional]" find="false" />

        <!-- NetX Duo only -->
        <provides interface="interface.el.nxd_web_http_client" />
        <provides interface="interface.el.nxd_web_http_client.${module.el.nxd_web_http_client.name}" />

        <property default="g_web_http_client${_instance}" display="Name" id="module.el.nxd_web_http_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nxd_web_http_client.name}")</constraint>
        </property>
        <property default="1024" display="TCP socket window size (bytes)" id="module.el.nxd_web_http_client.window_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.el.nxd_web_http_client.window_size}")  &amp;&amp; ("${module.el.nxd_web_http_client.window_size}" &gt; 0)
            </constraint>
        </property>
        <property default="web_http_client_init${_instance}" display="Name of generated initialization function" id="module.el.nxd_web_http_client.init_function">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nxd_web_http_client.init_function}")</constraint>
        </property>
        <property default="module.el.nxd_web_http_client.init.enable" display="Auto Initialization" id="module.el.nxd_web_http_client.init">
            <option display="Enable"  id="module.el.nxd_web_http_client.init.enable"  value="1"/>
            <option display="Disable" id="module.el.nxd_web_http_client.init.disable" value="0"/>
        </property>
        <header>
            extern NX_WEB_HTTP_CLIENT  ${module.el.nxd_web_http_client.name};
            void ${module.el.nxd_web_http_client.name}_err_callback(void * p_instance, void * p_data);
            void ${module.el.nxd_web_http_client.init_function}(void);
        </header>
        <includes>
            #include "nx_web_http_client.h"
        </includes>
        <macros>
        </macros>
        <declarations>
            NX_WEB_HTTP_CLIENT  ${module.el.nxd_web_http_client.name};
            #if defined(__ICCARM__)
            #define ${module.el.nxd_web_http_client.name}_err_callback_WEAK_ATTRIBUTE
            #pragma weak ${module.el.nxd_web_http_client.name}_err_callback  = ${module.el.nxd_web_http_client.name}_err_callback_internal
            #elif defined(__GNUC__)
            #define ${module.el.nxd_web_http_client.name}_err_callback_WEAK_ATTRIBUTE   __attribute__ ((weak, alias("${module.el.nxd_web_http_client.name}_err_callback_internal")))
            #endif
            void ${module.el.nxd_web_http_client.name}_err_callback(void * p_instance, void * p_data) ${module.el.nxd_web_http_client.name}_err_callback_WEAK_ATTRIBUTE;
            /*******************************************************************************************************************//**
               * @brief      This is a weak example initialization error function.  It should be overridden by defining a user  function
               *             with the prototype below.
               *             - void ${module.el.nxd_web_http_client.name}_err_callback(void * p_instance, void * p_data)
               *
               * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback arguments used to identify what error caused the callback.
             **********************************************************************************************************************/
            void ${module.el.nxd_web_http_client.name}_err_callback_internal(void * p_instance, void * p_data);
            void ${module.el.nxd_web_http_client.name}_err_callback_internal(void * p_instance, void * p_data)
            {
              /** Suppress compiler warning for not using parameters. */
              SSP_PARAMETER_NOT_USED(p_instance);
              SSP_PARAMETER_NOT_USED(p_data);

              /** An error has occurred. Please check function arguments for more information. */
              BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
            }
            /*******************************************************************************************************************//**
             * @brief     Initialization function that the user can choose to have called automatically during thread entry.
             *            The user can call this function at a later time if desired using the prototype below.
             *            - void ${module.el.nxd_web_http_client.init_function}(void)
             **********************************************************************************************************************/
            void ${module.el.nxd_web_http_client.init_function}(void)
            {
                UINT ${module.el.nxd_web_http_client.name}_err;
                /* Create HTTP Client. */
                ${module.el.nxd_web_http_client.name}_err = nx_web_http_client_create(&amp;${module.el.nxd_web_http_client.name},
                                                                             "${module.el.nxd_web_http_client.name} HTTP Client",
                                                                             &amp;${module.el.nxd_web_http_client.requires.nxd.ip::module.el.nx.ip.name},
                                                                             &amp;${module.el.nxd_web_http_client.requires.nxd.packet_pool::module.el.nx.packet_pool.name},
                                                                             ${module.el.nxd_web_http_client.window_size} );
                if (NX_SUCCESS != ${module.el.nxd_web_http_client.name}_err)
                {
                    ${module.el.nxd_web_http_client.name}_err_callback((void *)&amp;${module.el.nxd_web_http_client.name},&amp;${module.el.nxd_web_http_client.name}_err);
                }
            }            
        </declarations>
        <init>
            /** Call initialization function if user has selected to do so. */
            #if (${module.el.nxd_web_http_client.init})
                ${module.el.nxd_web_http_client.init_function}();
            #endif
        </init>
    </module>
</synergyModuleDescription>